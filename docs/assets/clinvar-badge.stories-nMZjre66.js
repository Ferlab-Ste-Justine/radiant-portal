import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{C as u}from"./conditional-wrapper-BBX8pIPQ.js";import{B as g}from"./badge-DdUfarqx.js";import{a as _,b as f,T as y}from"./tooltip-CWv3fgtm.js";import{u as v}from"./i18n-B-Is0zU6.js";import"./index-yBjzXJbu.js";import"./utils-CytzSlOG.js";import"./index-C66Dxnp2.js";import"./x-DA4wTodG.js";import"./createLucideIcon-DKFpjrVJ.js";import"./index-tvICUrOf.js";import"./index-Csi1vtvD.js";import"./index-_r67kdfS.js";import"./index-fNjTmf9T.js";import"./index-CJn4dinJ.js";import"./index-D-y1Urua.js";import"./index-DJkr1wGX.js";import"./index-pLOVI5Ig.js";import"./index-Bwb5bU54.js";import"./iframe-CgL2HL-C.js";const p={other:{color:"slate"},association_not_found:{color:"slate"},uncertain_significance:{color:"yellow",tooltipKey:"variant.clinVarsTooltips.uncertain_significance"},likely_benign:{color:"blue",tooltipKey:"variant.clinVarsTooltips.likely_benign"},likely_pathogenic:{color:"orange",tooltipKey:"variant.clinVarsTooltips.likely_pathogenic"},_low_penetrance:{color:"slate"},low_penetrance:{color:"slate"},risk_factor:{color:"slate"},association:{color:"slate"},uncertain_risk_allele:{color:"yellow",tooltipKey:"variant.clinVarsTooltips.uncertain_risk_allele"},pathogenic:{color:"red"},protective:{color:"slate"},conflicting_interpretations_of_pathogenicity:{color:"orange"},not_provided:{color:"slate"},established_risk_allele:{color:"slate"},likely_risk_allele:{color:"slate"},drug_response:{color:"slate"},benign:{color:"green"},confers_sensitivity:{color:"slate"}};function a({value:r,...m}){const{t:i}=v(),l=r.toLowerCase(),t=p[l];return e.jsx(u,{condition:!!t.tooltipKey,wrapper:d=>e.jsxs(_,{children:[e.jsx(f,{children:d}),e.jsx(y,{children:i(t.tooltipKey)})]}),children:e.jsx(g,{variant:t.color||"slate",...m,children:i(`variant.clinVars.${l}`)})})}a.__docgenInfo={description:"",methods:[],displayName:"ClinVarBadge",props:{onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},closeIconProps:{required:!1,tsType:{name:"ReactHTMLAttributes",raw:"React.HTMLAttributes<SVGElement>",elements:[{name:"SVGElement"}]},description:""},value:{required:!0,tsType:{name:"string"},description:""}},composes:["VariantProps"]};const A={title:"Feature/Variant/ClinVar Badge",component:a,args:{value:"other",variant:"slate"}},o={render:()=>e.jsx("div",{className:"flex flex-col gap-2 items-start",children:Object.keys(p).map(r=>e.jsx(a,{value:r}))})};var n,s,c;o.parameters={...o.parameters,docs:{...(n=o.parameters)==null?void 0:n.docs,source:{originalSource:`{
  render: () => {
    return <div className="flex flex-col gap-2 items-start">
        {Object.keys(ClinVarValueMap).map(key => <ClinVarBadge value={key} />)}
      </div>;
  }
}`,...(c=(s=o.parameters)==null?void 0:s.docs)==null?void 0:c.source}}};const D=["Default"];export{o as Default,D as __namedExportsOrder,A as default};
